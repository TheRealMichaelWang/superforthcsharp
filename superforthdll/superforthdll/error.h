#pragma once

#ifndef ERROR_H

#include <stdint.h>

typedef enum superforth_error {
	SUPERFORTH_ERROR_NONE,
	SUPERFORTH_ERROR_MEMORY,
	SUPERFORTH_ERROR_INTERNAL,

	//syntax errors
	SUPERFORTH_ERROR_UNEXPECTED_TOK,

	SUPERFORTH_ERROR_READONLY,
	SUPERFORTH_ERROR_TYPE_NOT_ALLOWED,

	SUPERFORTH_ERROR_UNDECLARED,
	SUPERFORTH_ERROR_REDECLARATION,

	SUPERFORTH_ERROR_UNEXPECTED_TYPE,
	SUPERFORTH_ERROR_UNEXPECTED_ARGUMENT_SIZE,

	SUPERFORTH_ERROR_CANNOT_RETURN,
	SUPERFORTH_ERROR_CANNOT_CONTINUE,
	SUPERFORTH_ERROR_CANNOT_BREAK,

	//virtual-machine errors
	SUPERFORTH_ERROR_INDEX_OUT_OF_RANGE,
	SUPERFORTH_ERROR_DIVIDE_BY_ZERO,
	SUPERFORTH_ERROR_STACK_OVERFLOW,
	SUPERFORTH_ERROR_READ_UNINIT,

	SUPERFORTH_ERROR_UNRETURNED_FUNCTION,
	
	SUPERFORTH_ERROR_ABORT,
	SUPERFORTH_ERROR_FOREIGN,

	SUPERFORTH_ERROR_CANNOT_OPEN_FILE
} superforth_error_t;

#define PANIC(OBJ, ERROR){ OBJ->last_err = ERROR; return 0; }
#define ESCAPE_ON_FAIL(PTR) {if(!(PTR)) { return 0; }}
#define PANIC_ON_FAIL(PTR, OBJ, ERROR) {if(!(PTR)) PANIC(OBJ, ERROR)}

#endif // !ERROR_H
